//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/MyControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyControl"",
    ""maps"": [
        {
            ""name"": ""Bathyscaphe"",
            ""id"": ""b3fa2b1c-89c7-49f9-ae37-b09120337371"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""56dd855d-8a60-45ff-a5fa-58913d971082"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""89661d83-e772-453d-924a-87b91a9ca7bf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bd1eb2cb-7594-4597-a297-ae97459af181"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1839024c-831a-4b44-9b39-db9ed2a43ed2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""31407e0a-5d0e-4bde-8b69-873d1e17f4c3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Bathyscaphe
        m_Bathyscaphe = asset.FindActionMap("Bathyscaphe", throwIfNotFound: true);
        m_Bathyscaphe_Move = m_Bathyscaphe.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Bathyscaphe
    private readonly InputActionMap m_Bathyscaphe;
    private IBathyscapheActions m_BathyscapheActionsCallbackInterface;
    private readonly InputAction m_Bathyscaphe_Move;
    public struct BathyscapheActions
    {
        private @MyControl m_Wrapper;
        public BathyscapheActions(@MyControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Bathyscaphe_Move;
        public InputActionMap Get() { return m_Wrapper.m_Bathyscaphe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BathyscapheActions set) { return set.Get(); }
        public void SetCallbacks(IBathyscapheActions instance)
        {
            if (m_Wrapper.m_BathyscapheActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BathyscapheActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BathyscapheActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BathyscapheActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_BathyscapheActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public BathyscapheActions @Bathyscaphe => new BathyscapheActions(this);
    public interface IBathyscapheActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
